import asyncio
import aiohttp
import json
import datetime
from datetime import datetime
import os
import re
import sqlite3
import mysql.connector
import faiss
import numpy as np
import math

from typing import Dict, Any
from fastapi import FastAPI
from pydantic import BaseModel
import openai
from openai import OpenAI
from dotenv import load_dotenv
import logging
from concurrent.futures import ThreadPoolExecutor
from typing import Dict, Any
import sys

from db.connector import get_db_connection


load_dotenv()


openai.api_key = os.getenv("OPENAI_API_KEY")
project_prefix = os.getenv("PROJECT_NAME")

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

app = FastAPI()


logging.basicConfig(
    filename='logs/logic.log',
    level=logging.INFO,
    format='%(asctime)s.%(msecs)03d [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


executor = ThreadPoolExecutor()


sessions: Dict[str, Any] = {}

class InitData(BaseModel):
    action: str


global faiss_index

faiss_index = None
embedding_model = "text-embedding-ada-002"
vector_dimension = 1536  # Example for the model 'ada-002'


print("Python executable:", sys.executable)
logging.info(f"sys.executable: {sys.executable}")
logging.info(f"Python path: {sys.path}")
logging.info(f"Environment PATH: {os.environ.get('PATH')}")


def get_current_time():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.on_event("startup")
async def startup_event():
    
    global faiss_index
    
    # Initialize the database connection
    global conn 
    conn = get_db_connection()

    # Checking if we have FAISS index in the memory 
    index_path = os.path.join(os.path.dirname(__file__), f'{project_prefix}_info.bin')

    if os.path.exists(index_path):
        faiss_info = faiss.read_index(index_path)
        logging.info(f"{project_prefix}_info.bin –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫—É")
    else:
        faiss_info = faiss.IndexFlatL2(vector_dimension)
        logging.info(f"–∫–∞–∫–∞—è-—Ç–∞ —Ö—É–π–Ω—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π {project_prefix}_info.bin")
    faiss_index = faiss_info


@app.on_event("shutdown")
async def shutdown_event():
    # Close the database connection on app shutdown
    conn.close()


async def send_openai_request(prompt, system_context, assistant_context, model="gpt-4o-mini"):
    headers = {
        "Authorization": f"Bearer {openai.api_key}",
        "Content-Type": "application/json"
    }

    messages = [
        {"role": "system", "content": system_context},
        {"role": "assistant", "content": assistant_context},
        {"role": "user", "content": prompt}
    ]

    data = {
        "model": model,
        "messages": messages
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post('https://api.openai.com/v1/chat/completions', headers=headers, json=data) as response:
                logging.info(f"üì• OpenAI API Response Status: {response.status}")

                if response.status == 200:
                    response_data = await response.json()
                    return response_data.get('choices', [{}])[0].get('message', {}).get('content', '')
                else:
                    error_message = await response.text()
                    logging.error(f"OpenAI API Error: {response.status} - {error_message}")
                    return ""

        except Exception as e:
            logging.error(f"Exception in send_openai_request: {e}")
            return ""
        
async def calculate_cost_of_request(response):
    if 'usage' in response:
        input_tokens = response['usage'].get('prompt_tokens', 0)
        output_tokens = response['usage'].get('completion_tokens', 0)

        input_cost_per_token = 0.150 / 1000000  # $0.150 / 1M input tokens
        output_cost_per_token = 0.600 / 1000000  # $0.600 / 1M output tokens

        input_cost = input_tokens * input_cost_per_token
        output_cost = output_tokens * output_cost_per_token
        total_cost = input_cost + output_cost  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        return total_cost
    else:
        logging.warning("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API.")
        return 0


async def process_user_prompt(prompt):
    # TODO: settings prompts
    system_context_settings = ""
    assistent_context_settings = ""

    response = await send_openai_request(prompt, system_context_settings, assistent_context_settings)

    if not response:
        logging.error("OpenAI API returned an empty response.")
        return None, None

    cost = calculate_cost_of_request(response)

    return response, cost


async def get_faiss_ids_and_distances_from_faiss():
    # –í–û–ó–í–†–ê–©–ê–ï–¢ ids –∏ distances
    # –í–û–ó–í–†–ê–©–ê–ï–¢ embedding_ids - –≠–¢–û –ù–ê–ô–î–ï–ù–ù–ê–Ø –ì–†–£–ü–ü–ê –°–ú–´–°–õ–û–í –î–õ–Ø SQL –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ –∏—Å–∫–æ–º–æ–≥–æ distances_level

    #TIMING
    timeing_log.info(f"–ê–ø–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã! –ú—ã –≤ async def get_faiss_ids_and_distances_from_faiss(call_id, session). \n –∏—Å–∫–∞—Ç—å –≤ get_faiss_ids_and_distances_from_faiss –Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∞ –Ω–∞ —è–∑—ã–∫–µ –ë–ó, –∞ –æ–Ω–∞ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.")
    # –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—é, –Ω–æ —Å–µ–π—á–∞—Å –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∞ —ç–º–±–µ–¥–∏–Ω–≥–∏ —Ç–æ–ª—å–∫–æ text_in_lang_knows_base - —ç—Ç–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ –æ–∫–æ—à–∫–æ —é–∑–µ—Ä—É 

    # global —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —ç—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—ã—à–µ
    top_k = 3 #—Å–∫–æ—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–æ—Ä–∫ –∏–∑ –ë–î/Faiss –±—É–¥–µ–º –±—Ä–∞—Ç—å 
    if faiss_index is None:
        raise ValueError("FAISS –∏–Ω–¥–µ–∫—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å.")


    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    stenograf_dialog_dkll = session.get('stenograf_dialog_dkll', [])
    preview_question_dkll = session.get('preview_question_dkll', '')
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º stenograf_dialog_dkll –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
    if isinstance(stenograf_dialog_dkll, list) and stenograf_dialog_dkll:
        stenograf_dialog_dkll = ' '.join(stenograf_dialog_dkll)
        

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    #    question_ids_and_distances = preview_question_dkll + ' ' + stenograf_dialog_dkll if stenograf_dialog_dkll else preview_question_dkll

    #–û–ù –ü–õ–û–•–û –ü–û–î–ì–û–¢–ê–í–õ–ò–í–ê–ï–¢ –ó–ê–ü–†–û–°. –¢ –ö –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –Ø–í–ù–û –í–´–î–ï–õ–ï–ù preview_question_dkll –í –ì–õ–ê–í–ù–û–ï, –ê stenograf_dialog_dkll –ö–ê–ö –í–¢–û–†–û–°–¢–ï–ü–ï–ù–ù–û–ï –¢ –ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï. ...–ò –ï–©–Å –ò –ù–ê –Ø–ó–´–ö–ï –ë–ó. !–û, –ö–ê–ö–ò–ï-–¢–û –ù–£–ñ–ù–´–ï –§–†–ê–ó–û–ß–ö–ò –Ø –ú–û–ì–£ –ü–†–ï–ü–û–î–ì–û–¢–ê–í–õ–ò–í–ê–¢–¨ –í –•–ï–õ–õ–û –¢–ï–ö–°–¢, –ö–û–¢–û–†–´–ô –û–î–ò–ù –†–ê–ó –ü–ï–†–ï–í–û–î–ò–¢ –ù–ê –Ø–ó–´–ö –ë–ó. –ò –∑–Ω–∞—á–µ–Ω–∏—è itsquestion –∏ usedstenograf –ë–£–î–£–¢ –ü–û–î–°–¢–ê–í–õ–ï–ù–´ –°–Æ–î–ê –ù–ê –Ø–ó–´–ö–ï –ë–ó


    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —è–≤–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º preview_question_dkll –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ stenograf_dialog_dkll –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ
    #    itsquestion = f'–í–æ–ø—Ä–æ—Å —Ç–∞–∫–æ–π: '
    itsquestion = f' \n Klausimas toks: '
    #    usedstenograf = f', –∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞: '
    usedstenograf = f', \n atsakant ƒØ ≈°ƒØ klausimƒÖ, papildomai naudokite jau vykusio dialogo informacijƒÖ: \n '
    if stenograf_dialog_dkll:
        question_ids_and_distances = (
            f'{itsquestion}"{preview_question_dkll}"{usedstenograf}{stenograf_dialog_dkll}'
        )
    else:
        question_ids_and_distances = f'–í–æ–ø—Ä–æ—Å —Ç–∞–∫–æ–π: "{preview_question_dkll}"'


    text_in_lang_knows_base = question_ids_and_distances

    #    TF-IDF - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å–ø–ª–æ—à–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ 

    #TIMING
    embedding = text_in_lang_knows_base_to_vector(call_id, session, text_in_lang_knows_base)
    #        logging.info(f"–¢–∞–∫–æ–π –≤–æ—Ç —ç–º–±–µ–¥–∏–Ω–≥: {embedding}")
    #TIMING
    logging.info("–æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ text_in_lang_knows_base_to_vector.")
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º query –≤ –≤–µ–∫—Ç–æ—Ä (embedding) —á–µ—Ä–µ–∑ OpenAI
        
    if embedding is None:
        raise ValueError("–≠–º–±–µ–Ω–¥–∏–Ω–≥–∏ –Ω–µ –æ—Ç–¥–∞–ª text_in_lang_knows_base_to_vector... –Ω–µ —É–¥–∞–ª–æ—Å—å.")
    
    if not isinstance(embedding, np.ndarray):
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy.ndarray
        embedding = np.array(embedding, dtype='float32')
        
    elif embedding.dtype != 'float32':
        # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ float32, –ø—Ä–∏–≤–æ–¥–∏–º –∫ float32
        embedding = embedding.astype('float32')
    if embedding.ndim == 1:
        # –ï—Å–ª–∏ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π
        embedding = embedding.reshape(1, -1)
    elif embedding.ndim == 2 and embedding.shape[0] == 1:
        # –§–æ—Ä–º–∞—Ç —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        pass
    else:
        # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        raise ValueError("–≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π [1, vector_dimension]...., –ß–ï–ú –û–ù –ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø")

    #    return embedding
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ numpy –º–∞—Å—Å–∏–≤
    #    embedding_np = np.array(embedding, dtype='float32').reshape(1, -1)

    logging.info(f"–¢–∞–∫–æ–π –≤–æ—Ç —ç–º–±–µ–¥–∏–Ω–≥ –æ—Ç –ø—Ä–∞–≤–ª—è–µ–º –≤ FAISS: {embedding}")

    distances, ids = faiss_index.search(embedding, top_k)

    logging.info(f"–¢–∞–∫–æ–π –≤–æ—Ç ids: {ids} –∏ –≤–æ—Ç —Ç–∞–∫–æ–π  distances: {distances}  –≤ get_faiss_ids_and_distances_from_faiss()")
    
    session['ids'] = ids
    session['distances'] = distances

    await get_text_from_mysql(call_id, session, ids)

    return {"distances": distances.tolist(), "ids": ids.tolist()}


async def get_text_from_mysql(call_id, session, ids): # –ó–î–ï–°–¨ –ó–ê–ü–£–°–ö general_chatgpt_api(call_id, session) ... –ü–ï–†–ï–î –≠–¢–ò–ú –í–û–ó–í–†–ê–©–ê–ï–¢ ids_sql - –≤—ã–±–†–ê–ù–ù–´–ï –∏–∑ mysql —Ç–µ–∫—Å—Ç—ã —Å—Ç—Ä–æ–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–æ–º–µ—Ä–∞–º–∏ 
    session = sessions.get(call_id)
    if not session:
        logging.error(f"–°–µ—Å—Å–∏—è —Å call_id {call_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    logging.info(f"------- –ü–æ—Å–º–æ—Ç—Ä–∏–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ get_text_from_mysql –Ω–∞ ids - {ids}")
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ids –≤ —Å—Ç—Ä–æ–∫—É
        ids_str = str(ids)
        # –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ (—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–∏—Ñ—Ä)
        id_list = re.findall(r'\d+', ids_str)
        logging.info(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ id: {id_list}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á–∏—Å–ª–∞
        if not id_list:
            logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª –≤ ids –¥–ª—è call_id {call_id}.")
            session['ids_sql'] = ""
            return

    
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ JSON –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQL
        config_path = '/var/www/botfyl.fyi/mysql_conn.json'
        with open(config_path, 'r') as file:
            config = json.load(file)
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if config["type"] == "sqlite":
            conn = sqlite3.connect(config["database"])
            print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite")
            logging.info(f"–ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å –∫ MySQL")
        elif config["type"] == "mysql":
            conn = mysql.connector.connect(
                host=config["host"],
                port=config["port"],
                user=config["user"],
                password=config["password"],
                database=config["database"]
            )
            print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL")
            logging.info(f"–ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—è –æ–Ω–æ –∫ MySQL")
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        #–≠—Ç–æ –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        ## –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        #ids_sql = await fetch_texts_from_db(ids)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ fetch_texts_from_db - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        #session['ids_sql'] = ids_sql.strip()
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤
        ids_sql = ""
        query = f"SELECT * FROM faiss_info WHERE id IN ({','.join(['%s'] * len(id_list))})"
        with conn.cursor() as cursor:
            cursor.execute(query, tuple(map(int, id_list)))
            for result in cursor.fetchall():
                record_text = "\n".join(f"{desc[0]}: {value}" for desc, value in zip(cursor.description, result))
                ids_sql += record_text + "\n\n"

        conn.close()
        #TIMING
        timeing_log.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ get_text_from_mysql.")
    
        session['ids_sql'] = ids_sql.strip()

        #TIMING
        timeing_log.info(f"–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç—É –∑–∞–ø–∏—Å—å, ...—Ç–æ! –í—ã –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ get_text_from_mysql –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç get_faiss_ids_and_distances_from_faiss, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–ª—é—á–∞–ª—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –¥–æ–±—ã—Ç—å ids_sql - —ç—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ –ë–ó –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Ö –≤ general_chatgpt_api.")
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è call_id {call_id}: ... ") #{ids_sql}

        #–Ω–∞–¥–æ –Ω–µ —Ç–æ—å—å–∫–æ –≤ —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å , –∞ –ø–æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç –ª–∏—à–Ω–µ–≥–æ, —Ç–æ –µ—Å—Ç—å –Ω–µ –æ—Ç—Å–∞–≤–ª—è—Ç—å field_05: None, field_06: None, link_to_download_document: , main_image_link: , image_list: –µ—Å–ª–∏ –≤ –Ω–∏—Ö –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –∏ —Ç –¥
        #        general_chatgpt_api(call_id, session)


        #–í–û–¢ –≠–¢–û –ù–ï –ü–û–ù–Ø–¢–ù–û –ó–ê–ß–ï–ú –ó–î–ï–°–¨ –í –ê–°–°–ò–ù–•–†–û–ù–ï –ó–ê–ü–£–°–ö–ê–¢–¨ –§–£–ù–ö–¶–ò–Æ general_chatgpt_api, –ò –í–û–û–ë–©–ï –ü–û–ß–ï–ú–£/–ó–ê–ß–ï–ú –û–ù–ê –ê–°–°–ò–ù–•–†–û–ù–ù–ê? –û–ù–ê –î–û–õ–ñ–ù–ê –í–´–ü–û–õ–ù–Ø–¢–¨–°–Ø –ß–Å–¢–ö–û –í –û–ü–†–ï–î–ï–õ–Å–ù–ù–´–ô –ú–û–ú–ï–ù–¢ –í –û–ë–©–ï–ô –¶–ï–ü–û–ß–ö–ï –°–û–ë–´–¢–ò–ô –ò –ù–ò–ö–û–ú–£ –û–ù–ê –ù–ï –ú–û–ñ–ï–¢ –£–°–¢–£–ü–ò–¢–¨ –°–í–û–Å –ú–ï–°–¢–û –ò –ï–Å –ù–ï–õ–¨–ó–Ø –ü–†–û–ü–£–°–¢–ò–¢–¨ –í–ü–ï–†–Å–î, –ß–¢–û–ë–´ –û–ù–ê –í–´–ü–û–õ–ù–ò–õ–ê –°–í–û–Æ –§–£–ù–ö–¶–ò–Æ –ü–ï–†–ï–î –ö–ï–ú-–¢–û...


        ## –í–´–ó–´–í–ê–ï–ú –§–£–ù–ö–¶–ò–Æ  
        timeing_log.info(f"–ó–∞–ø—É—Å–∫ general_chatgpt_api(call_id, session) –≤–Ω—É—Ç—Ä–∏ get_text_from_mysql.")
    
    

        # –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ general_chatgpt_api 
        timeing_log.info(f"–ó–∞–ø—É—Å–∫ general_chatgpt_api(call_id, session) –≤–Ω—É—Ç—Ä–∏ get_text_from_mysql.")
        asyncio.create_task (general_chatgpt_api(call_id, session))

        
        #TIMING
        timeing_log.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ/–∫–æ–Ω–µ—Ü asyncio.run_coroutine_threadsafe(general_chatgpt_api(call_id, session) –≤–Ω—É—Ç—Ä–∏ get_text_from_mysql.")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL: {e}", exc_info=True)
        session['ids_sql'] = ""


def text_in_lang_knows_base_to_vector(call_id, session, text_in_lang_knows_base): #–í–û–ó–í–†–ê–©–ê–ï–¢ embedding –¢–û–ú–£ –ö–¢–û –ï–ú–£ –î–ê–Å–¢ text_in_lang_knows_base 
    #    –≠–º–±–µ–¥–∏–Ω–≥–∏–Ω–∏–∑–∞—Ç–æ—Ä ada v2  $0.100 / 1M tokens,  $0.050 / 1M tokens in 24 ours
    if not text_in_lang_knows_base.strip():
        return None
    try:
        client = OpenAI()
        
        
        embedding = client.embeddings.create(
            model="text-embedding-ada-002",
            input = text_in_lang_knows_base
        ).data[0].embedding
        

        
        logging.info(f"–¢–∞–∫–æ–π –≤–æ—Ç —ç–º–±–µ–¥–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞ —Å–¥–µ–ª–∞–ª–∏ –∏–∑ text_in_lang_knows_base –≤ text_in_lang_knows_base_to_vector: ...") #{embedding}
        
    # –ö–ê–°–°–ê –ß–ï–ö
        # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
        input_tokens = len(text_in_lang_knows_base.split())  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
        cost_per_token = 0.100 / 1000000  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω
        cost = input_tokens * cost_per_token
        logging.info(f"–ó–∞ —Ç–æ–∫–µ–Ω—ã ada-002: {input_tokens}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.6f}$")
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é —Ä–∞—Å—Ö–æ–¥—ã
        session['balance_money_price_ada02_question'] = cost
        return embedding  # –í–µ—Ä–Ω—É—Ç—å –≤–µ–∫—Ç–æ—Ä
        
    except Exception as e:
        logging.error(f"[OpenAI] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        return None
        
    #–ö–û–î –ë–û–õ–ï–ï –ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ô –ß–ò–°–¢–ö–ò –¢–ï–ö–°–¢–ê
    #            import re
    #            def remove_html(text):
    #                return re.sub(r"<.*?>", "", text)  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ HTML-—Ç–µ–≥–∏
    #
    #            text_in_lang_knows_base = " ".join(
    #                remove_html(str(getattr(record, field, "") or "").strip())  # –£–±–∏—Ä–∞–µ–º HTML –∏ –ø—Ä–æ–±–µ–ª—ã
    #                for field in ["poiasnenie", "name_document", "glava", "statia", "primechanie", "dopolnenie"]
    #            ).strip()
    #–ï–©–Å –¢–ê–ú –ß–¢–û-–¢–û –ü–†–û –ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´ –ë–´–õ–û...     
        
# TODO: not implemented yet, but is important. To be cleaned later.
def ocenka_distances_level(call_id, distances): # –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ
    # session['distances'] = distances # –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç —Å—Ö–æ–∂ —Å –≤–æ–ø—Ä–æ—Å–æ–º.
    logging.info(f"–ü–æ—Å–º–æ—Ç—Ä–∏–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ocenka_distances_level –Ω–∞ distances - {distances}")
    
    
    #–î–æ–ø—É—Å—Ç–∏–º, —É –≤–∞—Å –≤ –∏–Ω–¥–µ–∫—Å–µ 3 –≤–µ–∫—Ç–æ—Ä–∞, –∏ –≤—ã –∏—â–µ—Ç–µ 2 –±–ª–∏–∂–∞–π—à–∏—Ö (top_k=2):
    distances, ids = faiss_index.search(embedding, 2)
    print(distances)
    # [[0.1, 0.5]]  # –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ 2 –±–ª–∏–∂–∞–π—à–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
    print(ids)
    # [[12, 45]]    # ID —ç—Ç–∏—Ö –¥–≤—É—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤

    # –ï—Å–ª–∏ FAISS –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω–¥–µ–∫—Å–µ), –æ–Ω –≤–µ—Ä–Ω—ë—Ç -1:
    distances, ids = faiss_index.search(embedding, 2)
    print(distances)
    # [[0.1, inf]]
    print(ids)
    # [[12, -1]]
    # –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–∞—é—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã) –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞), —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω.
    # –ü–æ—Ä–æ–≥ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    threshold = 0.5
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ—Ä–æ–≥—É
    relevant_results = [
        {"id": id, "distance": distance}
        for id, distance in zip(ids[0], distances[0])
        if distance <= threshold
    ]

    if not relevant_results:
        print("–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    else:
        print("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:", relevant_results)

        # –ü–æ—Ä–æ–≥–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        # –û–±—Ä–µ–∑–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º > 1.0
        filtered_ids = [id for id, distance in zip(ids[0], distances[0]) if distance <= 1.0]
        print("–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ ID:", filtered_ids)


async def general_chatgpt_api(call_id, session):
    session['t_start_gotovit_prompt'] = get_current_time()

    # –≤–≤–µ—Å—Ç–∏ –ø–æ–Ω—è—Ç–∏–µ –í–ï–° –ò–ù–§–û–†–ú–ê–¶–ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å.
    MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    RETRY_DELAY = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

    preview_question_dkll = session.get('preview_question_dkll')
    static_user_information = session.get('static_user_information', "")

    role_system_general_chatgpt = session.get('role_system_general_chatgpt')
    role_assistant_general_chatgpt = session.get('role_assistant_general_chatgpt')
    
    lang_native = session.get('lang_native')
    lang_knows_base = session.get('lang_knows_base')
    
    ids_sql = session.get('ids_sql', [])
    logging.info(f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç ids_sql –¥–æ—Å—Ç–∞–Ω—ã–π –∏–∑ —Å–µ—Å—Å–∏–∏ –≤ –±–ª–æ–∫–µ/—Ñ—É–Ω–∫—Ü–∏–∏ general_chatgpt_api:  {ids_sql}")
    
    stenograf_dialog_dkll = session.get('stenograf_dialog_dkll', "")
    
    context_dialog_dkll = session.get('context_dialog_dkll', "")

    answer_length = 80
    
    prompt = preview_question_dkll
    if not isinstance(prompt, str) or not prompt.strip():
        logging.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π prompt –¥–ª—è GPT API.")
        return ""

    #–°–û–ë–ò–†–ê–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–£–Æ messages, –ß–¢–û–ë–´ –û–¢–ü–†–ê–í–ò–¢–¨ –ï–Å –í data
    messages = [
        {   
            "role": "system", # –ª—É—á—à–µ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            "content": (
                f"{role_system_general_chatgpt}"
            ).format(answer_length=answer_length, lang_native=lang_native, lang_knows_base=lang_knows_base)
        },
        
#        {   
#            "role": "system",
#            "content": role_system_general_chatgpt.format(answer_length=answer_length, lang_native=lang_native, lang_knows_base=lang_knows_base)
#        },
        
        {
            "role": "assistant", # –ª—É—á—à–µ –ø–∏—Å–∞—Ç—å –Ω–∞ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–¥–µ–ª–∞–Ω —Ñ–∞–∏—Å
            "content": (
                f"{role_assistant_general_chatgpt}"
            ).format(ids_sql=ids_sql, stenograf_dialog_dkll=stenograf_dialog_dkll, context_dialog_dkll=context_dialog_dkll, static_user_information=static_user_information)
        },
        {
            "role": "user",
            "content": prompt  # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt
        }
    ]

    headers = {
        "Authorization": f"Bearer {openai.api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "gpt-4o-mini",
        "messages": messages
    }
                
    result = None
    
    async with aiohttp.ClientSession() as session_http:
        
        for attempt in range(MAX_RETRIES):
            try:
                session['t_g_prompt_is_ready_and_sent'] = get_current_time()
                async with session_http.post(
                    'https://api.openai.com/v1/chat/completions', headers=headers, json=data) as response:

                    logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ OpenAI API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status}")


                    if response.status != 200:
                        logging.error(f"–û—à–∏–±–∫–∞ API: {response.status}. –ü–æ–ø—ã—Ç–∫–∞ {attempt}.")
                    else:
                        session['t_g_gpt_answer_is_ready'] = get_current_time()
                        result = await response.json()

                        content_answer_gpt_general = result.get('choices', [{}])[0].get('message', {}).get('content', '')

                        if not content_answer_gpt_general:
                            logging.error(f"GPT API –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –ü–æ–ø—ã—Ç–∫–∞ {attempt}.")
                        else:
                            en_match = re.search(r'answer_gpt_general_dkll:\s*(.*?)\s*<<<END>>>', content_answer_gpt_general, re.DOTALL)
                            native_match = re.search(r'answer_gpt_general_native:\s*(.*?)\s*<<<END>>>', content_answer_gpt_general, re.DOTALL)

                            if en_match and native_match:
                                answer_gpt_general_dkll = en_match.group(1).strip()
                                answer_gpt_general_native = native_match.group(1).strip()
                                break  # –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                            else:
                                logging.error(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'answer_gpt_general_dkll' –∏–ª–∏ 'answer_gpt_general_native'. –ü–æ–ø—ã—Ç–∫–∞ {attempt}.")
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ GPT API (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

            await asyncio.sleep(RETRY_DELAY)  # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –∑–∞–ø—Ä–æ—Å–∞

    if not result:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT API –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫.")
        return None
    
    response_data = await response.json()  # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ JSON-–æ—Ç–≤–µ—Ç
    content_answer_gpt_general = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')

# –ù–∞–¥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞, –∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ–≥–æ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ, —Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞

# –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞
    if not content_answer_gpt_general:
        logging.error("–û—Ç–≤–µ—Ç answer_gpt_general –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ response –≤ –≤–∏–¥–µ 'content': ... .")
        return None, None

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ä–æ–º <<<END>>>
    en_match = re.search(r'answer_gpt_general_dkll:\s*(.*?)\s*<<<END>>>', content_answer_gpt_general, re.DOTALL)
    native_match = re.search(r'answer_gpt_general_native:\s*(.*?)\s*<<<END>>>', content_answer_gpt_general, re.DOTALL)

    if not en_match or not native_match:
        logging.error("–û—Ç–≤–µ—Ç GPT API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π 'answer_gpt_general_dkll' –∏ 'answer_gpt_general_native'.")
        return None

    
# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    answer_gpt_general_dkll = en_match.group(1).strip() if en_match else None
    answer_gpt_general_native = native_match.group(1).strip() if native_match else None

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
    if answer_gpt_general_dkll:
        session['answer_gpt_general_dkll'] = answer_gpt_general_dkll
    else:
        logging.warning("–ö–ª—é—á 'answer_gpt_general_dkll' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if answer_gpt_general_native:
        session['answer_gpt_general_native'] = answer_gpt_general_native
    else:
        logging.warning("–ö–ª—é—á 'answer_gpt_general_native' –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º–µ –ó–î–ï–°–¨ –∏ —ç—Ç–æ—Ç answer_gpt_general_dkll –∏ —Ç–æ—Ç, —á—Ç–æ –≤ —Å–µ—Å—Å–∏–∏ —Å–µ–π—á–∞—Å preview_question_dkll
    if preview_question_dkll:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—É –∫–ª–∏–µ–Ω—Ç–∞
        user_text = f"user: {preview_question_dkll} \n "
        session['stenograf_dialog_dkll'].append(user_text)

    if answer_gpt_general_dkll:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—É –±–æ—Ç–∞
        bot_text = f"gintaras: {answer_gpt_general_dkll} \n "
        session['stenograf_dialog_dkll'].append(bot_text)

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logging.info(f"–°—Ç–µ–Ω–æ–≥—Ä–∞—Ñ–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: \n {stenograf_dialog_dkll} \n ")
    
    
    
# –ö–ê–°–°–ê –ß–ï–ö
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if 'usage' in result:
        prompt_tokens = result['usage'].get('prompt_tokens', 0)  # –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        completion_tokens = result['usage'].get('completion_tokens', 0)  # –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
        input_cost_per_token = 0.150 / 1000000  # $0.150 / 1M input tokens
        output_cost_per_token = 0.600 / 1000000  # $0.600 / 1M output tokens
        # –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        prompt_cost = prompt_tokens * input_cost_per_token  # –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        completion_cost = completion_tokens * output_cost_per_token  # –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        total_cost_general_chatgpt_api = prompt_cost + completion_cost  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        logging.info(f"–í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {prompt_tokens}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {prompt_cost:.8f}$")
        logging.info(f"–ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {completion_tokens}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {completion_cost:.8f}$")
        logging.info(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å general_chatgpt_api: {total_cost_general_chatgpt_api:.8f}$")
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é —Ä–∞—Å—Ö–æ–¥—ã
        session['balance_money_general_chatgpt_api_detail'] = (
            f"prompt {prompt_tokens} for {prompt_cost:.8f}$ + "
            f"answer {completion_tokens} for {completion_cost:.8f}$"
        )
        session['balance_money_general_chatgpt_api_amount'] = total_cost_general_chatgpt_api
    else:
        logging.warning("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö general_chatgpt_api –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API.")

    session['t_g_gpt_answer_was_processed'] = get_current_time()


async def complit_line_calls_now(call_id, session):
    #–ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –≤ call_now –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é !!!!!!!!!! —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
    id_calls_now=session.get("id_calls_now")

    # –ü–æ–¥—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –∑–∞ STT
    price_azur_stt_per_1chas = 1.0 # –≤ –ê–∂—É—Ä–µ —Ü–µ–Ω–∞ –∑–∞ 1 —á–∞—Å –∞—É–¥–∏–æ
    stt_sek_stop_countdown = session.get("stt_sek_stop_countdown")
    stt_sek_start_countdown = session.get("stt_sek_start_countdown")
    tts_price_hello_text = session.get("tts_price_hello_text")
    
    time_format = "%Y-%m-%d %H:%M:%S.%f"  # —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç—ã + –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥

    stop_dt = datetime.strptime(stt_sek_stop_countdown, time_format)
    start_dt = datetime.strptime(stt_sek_start_countdown, time_format)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    delta = stop_dt - start_dt
    total_seconds = delta.total_seconds()
    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    stt_sek = math.ceil(total_seconds) # –û–∫—Ä—É–≥–ª—è–µ–º —Å–µ–∫—é –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
    minutes = stt_sek // 60
    seconds = stt_sek % 60
    #–°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    stt_price = stt_sek * (price_azur_stt_per_1chas / 3600 )
    
    
    # –ü–æ–¥—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –∑–∞ TTS
    price_azur_tts_per_1m_simb = 16 # –≤ –ê–∂—É—Ä–µ —Ü–µ–Ω–∞ –∑–∞ 1 –º–ª–Ω —Å–∏–º–≤–æ–ª–æ–≤
    answer_gpt_general_native = session.get("answer_gpt_general_native")
    tts_simballs = len(answer_gpt_general_native)  # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
    tts_price = tts_simballs * ( price_azur_tts_per_1m_simb / 1000000 )
    # TIMING
    timeing_log.info(f"\n !$!$!$!$!$!$!$!-->>> –°–¢–û–ò–ú–û–°–¢–¨ –∑–∞ {tts_simballs} —Å–∏–º–≤–æ–ª–æ–≤ —Å–∏–µ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –∑–≤—É–∫ —Å –ø–æ–º–æ—â—å—é Azur_STT –°–û–°–¢–ê–í–õ–Ø–ï–¢: {tts_price}$ (tts_price)")

    #—Å–ø–µ—Ä–≤–∞ —Ä–µ—à–∞–µ–º —Å Hello text. 
    hello_text_lang_knows_base = session.get("hello_text_lang_knows_base")
    hello_text_lang_native = session.get("hello_text_lang_native")
    id_calls_now = session.get("id_calls_now")

    if hello_text_lang_knows_base is not None and hello_text_lang_native is not None:
        await CallsNow.filter(id=id_calls_now, call_id=call_id).update(
            input_txt_nativ='First line',
            input_txt_dkll='Hello text',
            output_txt_dkll=hello_text_lang_knows_base,
            output_txt_native=hello_text_lang_native,
            tts_price = tts_price_hello_text,
        )
        session['hello_text_lang_knows_base'] = None
        session['hello_text_lang_native'] = None
        tts_price = tts_price_hello_text 
    else:
        await CallsNow.filter(id=id_calls_now, call_id=call_id).update(
            input_txt_dkll=session.get("preview_question_dkll"),
            input_txt_nativ=session.get("preview_question_native"),
            output_txt_native=session.get("answer_gpt_general_native"),
            output_txt_dkll=session.get("answer_gpt_general_dkll"),
            tts_price = tts_price,
        )

    
    #–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã –∑–∞ –≤—Å—é –ª–∏–Ω–∏—é –≤ –ë–î
    bm_all_line_price = session.get("balance_money_process_user_prompt_amount") + session.get("balance_money_price_ada02_question") + session.get("balance_money_general_chatgpt_api_amount") + tts_price + stt_price 
    #  # —Å—Ç–æ–∏–º–æ—Å—Ç—å  –ø—Ä–∏–ø–ª—é—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –∫ –æ–±—â–µ–π —Å—É–º–º–µ - —Ö–≤–æ—Å—Ç  –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ
    bm_in_start_calls_now = session.get("bm_in_start_calls_now")  #  - –∑–∞–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–π –≤ —Å—Ç—Ä–æ–∫–µ calling_list –≤ –ø–æ–ª–µ bm_in_start_calls_now –≤ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ calls_now 
    # TIMING
    bm_in_start_usd = bm_in_start_calls_now
    bm_in_end_usd = bm_in_start_usd - bm_all_line_price
    # TIMING
    t_long_azuraudio_chvost_pered_stop = session.get("t_long_azuraudio_chvost_pered_stop")

    #–°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–ê–ó–´ –î–ê–ù–ù–´–•

    await CallsNow.filter( id = id_calls_now, call_id = call_id).update(
        call_id=session.get("call_id"),
        t_in_waiting_speech=session.get("t_in_waiting_speech"),
        t_we_have_stt_results=session.get("t_we_have_stt_results"),
        t_start_gotovit_prompt=session.get("t_start_gotovit_prompt"),
        t_g_prompt_is_ready_and_sent=session.get("t_g_prompt_is_ready_and_sent"),
        t_g_gpt_answer_is_ready=session.get("t_g_gpt_answer_is_ready"),
        t_g_gpt_answer_was_processed=session.get("t_g_gpt_answer_was_processed"),
        t_tts_audio_ready_and_sent_to_klient = session.get("t_tts_audio_ready_and_sent_to_klient"),
        t_tts_audio_was_send_to_klient = session.get("t_tts_audio_was_send_to_klient"),
        
        t_action_audio_starting=session.get("t_action_audio_starting"),
        t_action_audio_will_finish=session.get("t_action_audio_will_finish"),
        
        voice_name=session.get("voice_name"),

        bm_vchat_detail = session.get("balance_money_process_user_prompt_detail"),
        bm_vchat_amount = session.get("balance_money_process_user_prompt_amount"),
        bm_ada02_question = session.get("balance_money_price_ada02_question"),
        bm_gchat_detail = session.get("balance_money_general_chatgpt_api_detail"),
        bm_gchat_amount = session.get("balance_money_general_chatgpt_api_amount"),
        bm_all_line_price = bm_all_line_price, 
        bm_in_end_usd = bm_in_end_usd, # –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤ –∫–æ–Ω—Ü–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        
        stt_sek = stt_sek,
        stt_price = stt_price,
        tts_simballs = tts_simballs,
    )
    
    
    # TIMING
    timeing_log.info(f"–ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –∑–Ω–∞—á–µ–Ω–∏–µ  bm_in_end_usd —Å—Ç–∞–ª–æ —Ä–∞–≤–Ω–æ bm_in_start_calls_now –∏ –æ–Ω–æ: {session['bm_in_start_calls_now']}.  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É CallsList , –≤ –ø–æ–ª–µ bm_in_start_calls_now")
    await CallsList.filter(call_id=call_id).update(
        bm_in_start_calls_now = bm_in_end_usd,
    )


    #–ò –ï–©–Å –ù–ê–î–û –ü–†–ò–ü–õ–Æ–°–û–í–´–í–ê–¢–¨ –¶–ï–ù–£ –ó–ê  t_long_azuraudio_chvost_pered_stop –í –ö–û–ù–¶–ï –†–ê–ó–ì–û–í–û–†–ê –ü–ï–†–ï–î –ö–õ–ò–ö–û–ú –ü–û –ö–ù–û–ü–ö–ï –°–¢–û–ü. –ò –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á–µ–º—É –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –°–¢–û–ü —Ä–∞–Ω–µ–µ —á–µ–º –≤–∫–ª—é—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, —Ç–æ –≤—Ä–µ–º—è —É—á—ë—Ç–Ω–æ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
    

#–ù–ê–î–û –ü–†–û–í–ï–°–¢–ò –ü–û–õ–ù–´–ô –ü–£–¢–¨ –û–ë–©–ï–ì–û –ë–ê–õ–ê–ù–°–ê –ù–ê –û–¢–î–ï–õ–¨–ù–û–ú –ê–ö–ö–ê–£–ù–¢–ï
#–ù–ê–î–û –ù–ê–°–¢–†–û–ò–¢–¨ –ö–û–≠–§ –ù–ê–¶–ï–ù–ö–ò

# TIMING   # TIMING   # TIMING   # TIMING   # TIMING   # TIMING   
# TIMING: –° –ú–û–ú–ï–ù–¢–ê –ù–ê–ß–ê–õ–ê –û–ñ–ò–î–ê–ù–ò–Ø –ó–í–£–ö–ê –í–û–ü–†–û–°–ê "bytes" in message, –° –î–ê–¢–ß–ò–ö–ê session['stt_sek_start_countdown'] = get_current_time() –î–û –ù–û–í–û–ì–û –¢–ê–ö–û–ì–û –ú–û–ú–ï–ù–¢–ê, –¢ –ï –ü–û–õ–ù–´–ô –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –¶–ò–ö–õ

# TIMING: –° –ú–û–ú–ï–ù–¢–ê –†–ê–°–ü–û–ó–ù–û–í–ê–ù–ò–Ø –†–ï–ß–ò –î–û –ú–û–ú–ï–ù–¢–ê –ù–ê–ß–ê–õ–ê –ì–û–õ–û–°–û–í–û–ì–û –û–¢–í–ï–¢–ê - –í–†–ï–ú–Ø –û–ë–î–£–ú–´–í–ê–ù–ò–Ø –û–¢–í–ï–¢–ê –ë–û–¢–û–ú.   
#session['t_action_audio_starting']
#session['stt_sek_start_countdown']
##=====================
#    stt_sek_stop_countdown != "2025-02-15 00:00:00.000"
#    t_we_have_stt_results= session.get("t_we_have_stt_results")  # –ù–∞—á–∞–ª –¥—É–º–∞—Ç—å
#    t_action_audio_starting = session.get("t_action_audio_starting")  # –ó–∞–∫–æ–Ω—á–∏–ª –¥—É–º–∞—Ç—å
## –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
#    fmt = "%Y-%m-%d %H:%M:%S.%f"
#    start_time = datetime.strptime(t_we_have_stt_results, fmt)
#    stop_time = datetime.strptime(t_action_audio_starting, fmt)
## –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
#    total_milliseconds = int((stop_time - start_time).total_seconds() * 1000)
## –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ HH:MM:SS
#    total_seconds = total_milliseconds // 1000
#    milliseconds = total_milliseconds % 1000  # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
##    hours, remainder = divmod(total_seconds, 3600)
##    minutes, seconds = divmod(remainder, 60)
## –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É "–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã/—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã"
##    t_pause_bot_for_thing = f"{total_milliseconds}/{hours:02}:{minutes:02}:{seconds:02}"
#    t_pause_bot_for_thing = f"{total_seconds:02}sek {milliseconds:03}ms" # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É "00sek 000ms"
##    session['t_pause_bot_for_thing'] = t_pause_bot_for_thing  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
##TIMING
#    timeing_log.info(f" \n –ù–∞—á–∞–ª –¥—É–º–∞—Ç—å –≤    {t_we_have_stt_results}(t_we_have_stt_results)\n –ó–∞–∫–æ–Ω—á–∏–ª –¥—É–º–∞—Ç—å –≤ {t_action_audio_starting}(t_action_audio_starting) \n –° –ú–û–ú–ï–ù–¢–ê –†–ê–°–ü–û–ó–ù–û–í–ê–ù–ò–Ø –†–ï–ß–ò –î–û –ú–û–ú–ï–ù–¢–ê –ù–ê–ß–ê–õ–ê –ì–û–õ–û–°–û–í–û–ì–û –û–¢–í–ï–¢–ê \n –í–†–ï–ú–Ø –û–ë–î–£–ú–´–í–ê–ù–ò–Ø –û–¢–í–ï–¢–ê –ë–û–¢–û–ú: t_pause_bot_for_thing: {t_pause_bot_for_thing} ")
#    stt_sek_stop_countdown = "2025-02-15 00:00:00.000"
#    stt_sek_stop_countdown != zerro_time
# ===============
#    zerro_time = "2025-02-15 00:00:00.000"
#    while True: # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
#        stt_sek_stop_countdown = session.get("stt_sek_stop_countdown")  # –ù–∞—á–∞–ª –¥—É–º–∞—Ç—å
#        t_action_audio_starting = session.get("t_action_audio_starting")  # –ó–∞–∫–æ–Ω—á–∏–ª –¥—É–º–∞—Ç—å
##        id_calls_now = session.get("id_calls_now")
##        id_calls = session.get("id_calls")
#        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
#        if (
#            stt_sek_stop_countdown != zerro_time
#            and t_action_audio_starting != zerro_time
#        ):
#            break
#        await asyncio.sleep(0.1)  # 100 –º—Å
## –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
#    fmt = "%Y-%m-%d %H:%M:%S.%f"
#    start_time = datetime.strptime(stt_sek_stop_countdown, fmt)
#    stop_time = datetime.strptime(t_action_audio_starting, fmt)
## –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
#    total_milliseconds = int((stop_time - start_time).total_seconds() * 1000)
## –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ HH:MM:SS
#    total_seconds = total_milliseconds // 1000
#    milliseconds = total_milliseconds % 1000  # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
##    hours, remainder = divmod(total_seconds, 3600)
##    minutes, seconds = divmod(remainder, 60)
## –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É "–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã/—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã"
##    t_pause_bot_for_thing = f"{total_milliseconds}/{hours:02}:{minutes:02}:{seconds:02}"
#    t_pause_bot_for_thing = f"{total_seconds:02}sek {milliseconds:03}ms" # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É "00sek 000ms"
##    session['t_pause_bot_for_thing'] = t_pause_bot_for_thing  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
##TIMING
#    timeing_log.info(f" \n –ù–∞—á–∞–ª –¥—É–º–∞—Ç—å –≤    {stt_sek_stop_countdown}(stt_sek_stop_countdown)\n –ó–∞–∫–æ–Ω—á–∏–ª –¥—É–º–∞—Ç—å –≤ {t_action_audio_starting}(t_action_audio_starting) \n –° –ú–û–ú–ï–ù–¢–ê –†–ê–°–ü–û–ó–ù–û–í–ê–ù–ò–Ø –†–ï–ß–ò –î–û –ú–û–ú–ï–ù–¢–ê –ù–ê–ß–ê–õ–ê –ì–û–õ–û–°–û–í–û–ì–û –û–¢–í–ï–¢–ê \n –í–†–ï–ú–Ø –û–ë–î–£–ú–´–í–ê–ù–ò–Ø –û–¢–í–ï–¢–ê –ë–û–¢–û–ú: t_pause_bot_for_thing: {t_pause_bot_for_thing} ")


#    calling_list
#            balance_money_inthestart=session.get("balance_money_inthestart"), # –°–¢–ê–¢–ò–ß–ù–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ calling_list –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–≤—è–∑–∏


#    session['t_action_audio_starting'] = '2025-02-15 00:00:00.000'
#    session['stt_sek_stop_countdown'] = '2025-02-15 00:00:00.000'

## END

#    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Å—Å–∏–∏
#    logging.info("\n \n \n  –§ –ò –ù –ê –õ –¨ –ù –ê –Ø     –° –ï –° –° –ò –Ø ===================================================== \n ")
#    for key, value in session.items():
#        logging.info("  %s: %s", key, value)
#    logging.info("======================================================================================== \n \n ")

if __name__ == "__main__":
    import asyncio

    async def main():
        while True:
            user_input = input("Enter your prompt (or type 'exit' to quit): ")
            if user_input.lower() == "exit":
                print("üëã Bye")
                break

            response = await process_user_prompt(user_input)

            if response:
                print(f"ü§ñ Bot: {response}")

                search_results = await get_faiss_ids_and_distances_from_faiss()
                print(f"üîç Search Results: {search_results}")

    asyncio.run(main())